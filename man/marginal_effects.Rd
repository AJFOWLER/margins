% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/marginal_effects.R
\name{marginal_effects}
\alias{marginal_effects}
\alias{marginal_effects.glm}
\alias{marginal_effects.lm}
\title{Differentiate a Model Object}
\usage{
marginal_effects(model, data, ...)

\method{marginal_effects}{lm}(model, data, type = c("response", "link"),
  eps = 1e-07)

\method{marginal_effects}{glm}(model, data, type = c("response", "link"),
  eps = 1e-07)
}
\arguments{
\item{model}{A model object, perhaps returned by \code{\link[stats]{lm}} or \code{\link[stats]{glm}}}

\item{data}{A data.frame over which to calculate marginal effects.}

\item{type}{A character string indicating the type of marginal effects to estimate. Mostly relevant for non-linear models, where the reasonable options are \dQuote{response} (the default) or \dQuote{link} (i.e., on the scale of the linear predictor in a GLM).}

\item{eps}{A numeric value specifying the \dQuote{step} to use when calculating numerical derivatives. By default this is the smallest floating point value that can be represented on the present architecture.}
}
\value{
An data.frame with dimensions equal to \code{data}, where each row is an observation and each column is the marginal effect of that variable for the data values provided by \code{data}.
}
\description{
Extract marginal effects (via numerical differentiation) and predicted differences in factor changes from a model object, conditional on data
}
\details{
This function uses numeric differentiation (\code{\link[numDeriv]{grad}}) to extract marginal effects from an estimated model with respect to all numeric variables specified in \code{data} and returns a data.frame containing the unit-specific marginal effects with respect to each variable included (or not included) in the model. (Note that this is not each \emph{coefficient}.) For factor variables (or character variables, which are implicitly coerced to factors by modelling functions), discrete differences in predicted outcomes are reported instead (i.e., change in predicted outcome when factor is set to a given level minus the predicted outcome when the factor is set to its baseline level). If you want to use numerical differentiation for factor variables (which you probably do not want to do), enter them into the original modelling function as numeric values rather than factors.

Variable class coercion (other than \code{factor(x)}) inside a formula passed to, for example, \code{\link[stats]{lm}} may cause weird behavior, or errors.
}
\examples{
require("datasets")
x <- lm(mpg ~ cyl * hp + wt, data = mtcars)
marginal_effects(x)

# factor variables report discrete differences
x <- lm(mpg ~ factor(cyl) * factor(am), data = mtcars)
marginal_effects(x)

}
\seealso{
\code{\link{margins}}, \code{\link{build_margins}}, \code{\link{extract_marginal_effects}}
}
\keyword{models}

